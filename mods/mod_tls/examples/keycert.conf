# 
# keycert.conf
# 
# THIS FILE IS AN EXAMPLE CONFIGURATION FILE.
#
# By all means, you have read through every last directive of this file and have
# deemed it safe for use on your server, go ahead. Regardless, using default
# configuration files on a live server is not necessarily a smart move
# (trust me).
#
# This is an example configuration file made for Amethyst's mod_tls module
# demonstrating basic key-certificate setup. If you're looking for a way to set
# up TLS with this server using a private key and certificate file with no
# encryption, signing, etc, this is the file to look off of.
#
# NOTE: If you intend to use Amethyst behind a proxy server, and you are running
# Amethyst on the same system, you may want to self-sign the certificate, or
# tell your proxy server not to verify hostnames, because TLS is very specific
# when it comes to verifying the hostname of a (remote) host.
#
<IfModule mod_tls>
	# Enable the TLS engine. This will set up the TLS-enabled HTTP server (HTTPS)
	# instead of the default one (HTTP).
	#
	TLSEngine On

	# Give the server the locations of the private key and certificate files. In
	# general, these should be PEM encoded files similar in format to:
	#
	# -----BEGIN CERTIFICATE-----
	# ...certificate data here...
	# -----END CERTIFICATE-----
	#
	# for PFX (PKCS #12 encrypted data) certificates, see pfx.conf.
	#
	# NOTE: You probably shouldn't place these paths in environment variables,
	# since any process with even remotely heightened privelleges can read all
	# of your environment variables. This could mean you risk exposing the
	# location of sensitive information.
	#
	TLSCertificateFile /path/to/my/certificate/file/cert.pem
	TLSKeyFile /path/to/my/certificate/file/privkey.pem

	# That's it! You're done!
	#
	# Amethyst should now run with HTTP over TLS instead of plain old HTTP when you
	# restart it!
	#
</IfModule>

# vim: syntax=conf ts=4 sw=4 sts=4 sr noet


# 
# pfx.conf
# 
# THIS FILE IS AN EXAMPLE CONFIGURATION FILE.
#
# By all means, you have read through every last directive of this file and have
# deemed it safe for use on your server, go ahead. Regardless, using default
# configuration files on a live server is not necessarily a smart move
# (trust me).
#
# This is an example configuration file for the Amethyst mod_tls module,
# demonstrating how to set up TLS on the Amethyst WebSocket Server using PFX
# files, generally encrypted with a password.
#
# I should note here that, as PFX files require a password to extract data from,
# it SHOULD NOT be used as the way your server handles TLS certificates, because
# this will block your server from starting up on boot.
#
<IfModule mod_tls>
	# Enable the TLS engine. This will set up the TLS-enabled HTTP server (HTTPS)
	# instead of the default one (HTTP).
	#
	TLSEngine On

	# Give the server the location of the PFX file to use for TLS.
	#
	# For information on how to use PEM-encoded certificate and key files instead,
	# check keycert.conf
	#
	# NOTE: You probably shouldn't place these paths in environment variables,
	# since any process with even remotely heightened privelleges can read all
	# of your environment variables. This could mean you risk exposing the
	# location of sensitive information.
	#
	TLSPFXFile /path/to/my/certificate/data/cert.pfx

	# Give the server the location of an executable to use to grab a password from
	# the user.
	#
	# NOTE: This is only required when you use a PFX file for TLS
	#
	TLSPasswordHelper /bin/systemd-ask-password
	
	# That's it! You're done!
	#
	# Amethyst should now run with HTTP over TLS instead of plain old HTTP when you
	# restart it!
	#
</IfModule>

# vim: syntax=conf ts=4 sw=4 sts=4 sr noet

